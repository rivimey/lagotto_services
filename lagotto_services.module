<?php
/**
 * @file
 * Drupal interface to the Lagotto service.
 */

// Prefixes that could appear on a DOI.
define('LAGOTTO_SERVICES_DOI_SCHEME', 'doi:');
define('LAGOTTO_SERVICES_DOI_URL', 'http://dx.doi.org/');
define('LAGOTTO_SERVICES_DOI_SSLURL', 'https://dx.doi.org/');

define('LAGOTTO_SERVICES_SERVICE_URI', '/api/v%version%/articles');
define('LAGOTTO_SERVICES_API_FETCH', 5);
define('LAGOTTO_SERVICES_API_POST', 4);

define('LAGOTTO_SERVICES_DEFAULT_DOMAIN', 'http://alm.plos.org');
define('LAGOTTO_SERVICES_DEFAULT_KEY', '');

/**
 * Implements hook_help().
 */
function lagotto_services_help($path, $arg) {
  switch ($path) {
    case 'admin/help#lagotto_services':
      $path = dirname(__FILE__) . '/README.md';
      if (file_exists($path)) {
        $readme = file_get_contents($path);
      }
      else {
        $path = dirname(__FILE__) . '/README.txt';
        if (file_exists($path)) {
          $readme = file_get_contents($path);
        }
      }
      if (!isset($readme)) {
        return NULL;
      }
      if (module_exists('markdown')) {
        $filters = module_invoke('markdown', 'filter_info');
        $info = $filters['filter_markdown'];

        if (function_exists($info['process callback'])) {
          $function = $info['process callback'];
          $output = filter_xss_admin($function($readme, NULL));
        }
        else {
          $output = '<pre>' . check_plain($readme) . '</pre>';
        }
      }
      else {
        $output = '<pre>' . check_plain($readme) . '</pre>';
      }
      return $output;

    case 'admin/config/services/lagotto_services':
      return '<p>' . t('The Drupal interface to the Lagotto service.') . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function lagotto_services_permission() {
  return array(
    'administer lagotto services' => array(
      'title' => t('Administer Lagotto Services'),
      'description' => t('Administer the Lagotto server configuration.'),
    ),
    'create doi records' => array(
      'title' => t('Create DOIs on the Lagotto Server'),
      'description' => t('Add new DOIs to the Lagotto server (requires admin configuration).'),
    ),
    'delete doi records' => array(
      'title' => t('Delete DOIs on the Lagotto Server'),
      'description' => t('Delete DOIs on the Lagotto server (requires admin configuration).'),
    ),
    'make doi requests' => array(
      'title' => t('Make DOI requests'),
      'description' => t('Request information about individual DOIs from the Lagotto server.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function lagotto_services_menu() {
  $items = array();
  $items['admin/config/services/lagotto_services'] = array(
    'title' => 'Lagotto Services',
    'description' => 'Provides configuration options for Lagotto Services.',
    'access arguments' => array('administer lagotto services'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lagotto_services_admin_settings'),
    'file' => 'lagotto_services.admin.inc',
  );
  return $items;
}

/**
 * API: Return True if current session has permission to add DOIs to server.
 *
 * @return string
 *   The server base URL as configured by the user, or the default.
 *
 * @see lagotto_services_add_doi
 * @see lagotto_services_remove_doi_enabled
 */
function lagotto_services_add_doi_enabled() {
  $create_doi_config = variable_get('lagotto_services_create_doi_enabled', FALSE);
  $enabled = $create_doi_config && user_access('create alm records');
  return $enabled;
}

/**
 * API: Return True if current session has permission to remove DOI from server.
 *
 * @return string
 *   The server base URL as configured by the user, or the default.
 *
 * @see lagotto_services_remove_doi
 * @see lagotto_services_add_doi_enabled
 */
function lagotto_services_remove_doi_enabled() {
  $delete_doi_config = variable_get('lagotto_services_delete_doi_enabled', FALSE);
  $enabled = $delete_doi_config && user_access('delete alm records');
  return $enabled;
}

/**
 * API: Return the configured ALM service host (base URL).
 *
 * @return string
 *   The server base URL as configured by the user, or the default.
 *
 * @see lagotto_services_service_key
 * @see lagotto_services_service_creds
 */
function lagotto_services_service_host() {
  $url = variable_get('lagotto_services_url', LAGOTTO_SERVICES_DEFAULT_DOMAIN);
  return $url;
}

/**
 * API: Return the configured ALM service administrator credentials.
 *
 * These credentials are only used to create or delete articles. Read
 * access requires the API key.
 *
 * @return array
 *   'user'  - the configured user name
 *   'pass'  - the configured password
 *
 * @see lagotto_services_service_host
 * @see lagotto_services_service_key
 * @see lagotto_services_add_doi
 * @see lagotto_services_remove_doi
 */
function lagotto_services_service_creds() {
  $user = variable_get('lagotto_services_adminuser', '');
  $pass = variable_get('lagotto_services_adminpass', '');
  return array('user' => $user, 'pass' => $pass);
}

/**
 * API: Return the configured ALM service URL.
 *
 * @param int $version
 *   API version number.
 *
 * @return string
 *   The server URL as configured by the user, or the default.
 *
 * @see lagotto_services_service_host
 */
function lagotto_services_service_url($version = LAGOTTO_SERVICES_API_FETCH) {
  $possible_versions = array( 3, 4, 5 );
  if (!in_array($version, $possible_versions)) {
    $version = LAGOTTO_SERVICES_API_FETCH;
  }

  $service_uri = preg_replace('/\%version\%/', $version, LAGOTTO_SERVICES_SERVICE_URI);

  $url = variable_get('lagotto_services_url', LAGOTTO_SERVICES_DEFAULT_DOMAIN);
  return $url . $service_uri;
}

/**
 * API: Return the configured ALM service API key.
 *
 * @return string
 *   The server key as configured by the user, or the default.
 *
 * @see lagotto_services_service_host
 * @see lagotto_services_service_url
 */
function lagotto_services_service_key() {
  $key = variable_get('lagotto_services_apikey', LAGOTTO_SERVICES_DEFAULT_KEY);
  return $key;
}

/**
 * Return an article description array in a form suitable for submission.
 *
 * All parameters are validated using check_plain.
 *
 * @param string $doi
 *    The DOI of the article.
 * @param timestamp $date
 *    The publication date, compatible with date().
 * @param string $title
 *    The title of the article. Must be UTF-8 encoded.
 *
 * @return array
 *    An array containing an 'article' key containing the following keys:
 *    'doi' - The DOI of the article.
 *    'title' - The XSS-filtered title, with any html entities decoded.
 *    'year' - the publication year, e.g. 2011
 *    'month' - the publication month, e.g. 6
 *    'day' - the publication day, e.g. 15
 */
function lagotto_services_make_article_desc($doi, $date, $title) {
  $year = check_plain(date('Y', $date));
  $mon = check_plain(date('n', $date));
  $day = check_plain(date('j', $date));

  $doi = check_plain($doi);

  // Turn html entities into utf8 and strip html elements.
  $title = html_entity_decode(filter_xss($title, array()), ENT_QUOTES, 'UTF-8');
  $title = check_plain($title);

  $descriptor = array(
    'doi' => $doi,
    'title' => $title,
    'year' => (int) $year,
    'month' => (int) $mon,
    'day' => (int) $day,
  );
  return array('article' => $descriptor);
}

/**
 * Make a metrics retrieval URL for a DOI in the form "10.7554/jnl.01086".
 *
 * Globals: defines define the default base URL and the API key.
 *
 * @param mixed $doi_list
 *   The DOI that is being enquired about. This can be either a string or an
 *   array of strings. Invalid DOIs are ignored, and prefixes (e.g. doi:) are
 *   removed.
 * @param array $options
 *   'include_detail' - TRUE to include timeline info in the metrics.
 *   'service_key' - override the key from lagotto_services_service_key.
 *   'service_url' - override the url from lagotto_services_service_url.
 *                   This should be the full api link, not just the base.
 *   'fetch_api_version' - override the normal api version number (e.g. '5').
 *   'sources' - if present must be an array of names of data sources.
 *   'order_by' - The order of results:
 *                   'date' - use descending date,
 *                   'event' - by descending event count
 *
 * @return string|null
 *   A URL to be retrieved, or NULL if:
 *   - zero or more than 50 DOIs are present after cleaning,
 *   - if the server URL is invalid.
 */
function lagotto_services_make_fetch_url($doi_list, $options = array()) {
  $default_options = array(
    'include_detail' => FALSE,
    'service_key' => NULL,
    'service_url' => NULL,
    'sources' => NULL,
    'order_by' => NULL,
    'fetch_api_version' => LAGOTTO_SERVICES_API_FETCH,
  );
  $options = array_merge($default_options, $options);

  $sources = array();
  $dois = array();

  // Wrap single doi with array to make remaining logic simpler.
  if (is_string($doi_list)) {
    $doi_list = array($doi_list);
  }

  // Sanitise the DOI list.
  if (is_array($doi_list)) {
    foreach ($doi_list as $doi) {
      $d = lagotto_services_sanitise_doi($doi);
      if (!empty($d)) {
        $dois[] = $d;
      }
    }
  }

  // If none of the DOIs was valid, there are more than the server will process,
  // or the original $doi_list was neither a string nor an array, return null.
  if (empty($dois) || count($dois) > 50) {
    return NULL;
  }

  if (!empty($options['sources']) && is_array($options['sources'])) {
    $source_list = array();
    foreach ($source_list as $src) {
      if (is_string($src) && !empty($src)) {
        $sources[] = $src;
      }
    }
  }

  // We allow the url to be overriden, but if so it should be the whole thing.
  if (!empty($options['service_url'])) {
    $url = $options['service_url'];
  }
  else {
    $url = lagotto_services_service_url($options['fetch_api_version']);
  }
  if (!valid_url($url, TRUE)) {
    return NULL;
  }

  $key = lagotto_services_service_key();

  // Translate the flags.
  $info = ($options['include_detail']) ? 'detail' : 'summary';

  // Finally, construct the url.
  $query = array(
    'api_key' => $key,
    'type' => 'doi',
    'ids' => implode(',', $dois),
    'info' => $info,
  );
  // Optional 'order' flag.
  if ($options['order_by'] == 'event' && !empty($sources)) {
    $query['order'] = NULL;
  }
  // Optional sources list.
  if (!empty($sources)) {
    $query['sources'] = implode(',', $sources);
  }
  return url($url, array('absolute' => TRUE, 'query' => $query));
}

/**
 * Convert a DOI into the minimal form '10.\d+/.+'.
 *
 * Check that a DOI is not a URL or URI and appears valid, returning the
 * minimal form if possible or NULL.
 *
 * @param string $doi
 *   The DOI that is being checked.
 *
 * @return bool|mixed
 *   A trimmed $doi if it validates OK, FALSE if not.
 */
function lagotto_services_sanitise_doi($doi) {
  $doi_cache = lagotto_services_sanitise_doi_cache($doi);

  return $doi_cache[$doi];
}

/**
 * Build a cache of DOI requests.
 *
 * @param string $doi
 *   The DOI that is being checked.
 *
 * @return mixed
 *   An array of DOIs - the request as the key and the sanitised DOI as the
 *   value.
 */
function lagotto_services_sanitise_doi_cache($doi) {
  $doi_cache = &drupal_static(__FUNCTION__, array());

  if (!isset($doi_cache[$doi])) {
    $patterns = array(
      '/^https?:\/\/dx\.doi\.org\/(10\.\d+\/.+)$/',
      '/^doi:(10\.\d+\/.+)$/',
    );

    $clean_doi = preg_replace($patterns, '$1', $doi);

    if (!preg_match('/^10\.\d+\/.+$/', $clean_doi)) {
      $doi_cache[$doi] = FALSE; /* negative cache */
    }
    else {
      $doi_cache[$doi] = $clean_doi;
    }
  }

  return $doi_cache;
}

/**
 * Internal function to construct and send a PUT or POST request to the server.
 *
 * @param string $base_url
 *    The URL to use, to which the DOI will be added.
 * @param array $article_info
 *    The Lagotto options array defining this request. It must be in this form:
 *       array('article' => lagotto_services_make_article_desc(...) );
 *    Can be NULL if there is no body to send.
 * @param bool $action
 *    One of 'POST' (Add), 'PUT' (Update) or 'DELETE' (Delete).
 *
 * @return object
 *    The returned HTTP response object.
 */
function lagotto_services_do_modify_request($base_url, $action, $article_info = NULL) {
  $auth64 = lagotto_services_make_auth_token();
  if (empty($auth64)) {
    watchdog('lagotto_services',
      'DOI request failed: credentials not set',
      WATCHDOG_ERROR);
    return NULL;
  }

  // The successful API response differs for Add / Update. and the DOI should
  // be in the URL for v4 Update.
  $url = $base_url . '/info:doi/' . $article_info['article']['doi'];
  $success = 200;
  switch ($action) {
    case 'PUT':
      $success = 201;
      break;
    case 'POST':
      $url = $base_url;
      break;
    case 'DELETE':
      break;
    default:
      watchdog('lagotto_services',
        'DOI request failed: invalid action requested.',
        WATCHDOG_ERROR);
      return NULL;
  }

  $http_options = array(
    'headers' => array(
      'Content-Type' => 'application/json',
      'Accept' => 'application/json',
      'Authorization' => $auth64,
    ),
    'method' => $action,
  );

  $body = json_encode($article_info);
  $http_options['data'] = $body;
  $response = drupal_http_request($url, $http_options);

  if (empty($response) || $response->code != $success) {
    watchdog('lagotto_services',
      'Remote DOI request to [%url] of [%req] failed code [%code] with message [%msg]',
      array(
        '%url' => $url,
        '%req' => $body,
        '%code' => $response->code,
        '%msg' => $response->data,
      ), WATCHDOG_WARNING);
  }
  return $response;
}

/**
 * Make an HTTP Basic auth token from the credentials defined in module config.
 *
 * @return null|string
 *   NULL if either the user or password is not set, or a base64 encoded
 *   token usable in the HTTP Authorization header.
 */
function lagotto_services_make_auth_token() {
  // Form the http basic authentication token for the api call.
  $creds = lagotto_services_service_creds();
  if (empty($creds['user']) || empty($creds['pass'])) {
    return NULL;
  }
  $auth64 = base64_encode($creds['user'] . ':' . $creds['pass']);
  return 'Basic ' . $auth64;
}

/**
 * API: Delete a record request using the ALM v4 api.
 *
 * @param string $doi
 *   The DOI of the article.
 * @param array $options
 *   'include_detail' - TRUE to include timeline info in the metrics.
 *   'service_key' - override the key from lagotto_services_service_key.
 *   'service_url' - override the url from lagotto_services_service_url.
 *   'fetch_api_version' - override the normal api for existence checks (e.g. '5').
 *   'post_api_version' - override the api version number (e.g. '4'). Use with care.
 *   'quiet' - don't log failed deletions when the initial lookup fails.
 *
 * @return array
 *   An associative array containing the response from the server or null if
 *   either drupal access is denied, the user and PW is unset or this facility
 *   is administratively disabled.
 */
function lagotto_services_remove_doi($doi, $options = array()) {
  $enabled = lagotto_services_remove_doi_enabled();
  if (!$enabled) {
    watchdog('lagotto_services',
      'Delete DOI request failed: permission denied',
      WATCHDOG_WARNING);
    return NULL;
  }

  $default_options = array(
    'include_detail' => FALSE,
    'service_key' => NULL,
    'service_url' => NULL,
    'post_api_version' => LAGOTTO_SERVICES_API_POST,
    'quiet' => FALSE,
  );
  $options = array_merge($default_options, $options);
  $url = lagotto_services_service_url($options['post_api_version']);

  // If the DOI is already on the server we need to check for update.
  $doi_on_server = lagotto_services_doi_exists($options);
  if (!empty($doi_on_server)) {
    $response = lagotto_services_do_modify_request($url, 'DELETE');
    return $response;
  }
  elseif (!$options['quiet']) {
    watchdog('lagotto_services',
      'DOI [%doi] does not exist on the Lagotto server. Deletion not performed.',
      array('%doi' => $doi),
      WATCHDOG_WARNING);
  }
}

/**
 * API: Make a request using the ALM v4 api.
 *
 * To create a new record on the ALM server using the DOI and other details
 * provided.
 *
 * @param string $doi
 *   The DOI of the article.
 * @param string $date
 *   The publication date of the article (unix).
 * @param string $title
 *   The title of the article.
 * @param array $options
 *   'include_detail' - TRUE to include timeline info in the metrics.
 *   'service_key' - override the key from lagotto_services_service_key.
 *   'service_url' - override the url from lagotto_services_service_url.
 *   'fetch_api_version' - override the normal api for existence checks (e.g. '5').
 *   'post_api_version' - override the api version number (e.g. '4'). Use with care.
 *   'quiet' - don't log failed creations because DOI already exists.
 *   'autoupdate' - update if DOI exists on server.
 *
 * @return array|null
 *   Eithera an associative array containing the response from the server or
 *   NULL if either drupal access is denied, the user or PW is unset, the
 *   article was not updated (e.g. it was already there), or this function is
 *   administratively disabled.
 */
function lagotto_services_add_doi($doi, $date, $title, $options = array()) {
  $enabled = lagotto_services_add_doi_enabled();
  if (!$enabled) {
    watchdog('lagotto_services',
      'Add DOI request failed: permission denied', WATCHDOG_ERROR);
    return NULL;
  }

  $default_options = array(
    'include_detail' => FALSE,
    'post_api_version' => LAGOTTO_SERVICES_API_POST,
    'autoupdate' => FALSE,
    'quiet' => FALSE,
  );
  $options = array_merge($default_options, $options);

  $article_desc = lagotto_services_make_article_desc($doi, $date, $title);
  $url = lagotto_services_service_url($options['post_api_version']);

  // If the DOI is already on the server we need to check for update.
  $doi_on_server = lagotto_services_doi_exists($options);
  if (empty($doi_on_server)) {
    // Send the addition request.
    $response = lagotto_services_do_modify_request($url, 'POST', $article_desc);
    return $response;
  }
  elseif ($options['autoupdate']) {
    // Looking up the DOI succeeded and we have autoupdate set.
    // See if the returned info differs and update if needed.
    $record_date = strtotime($doi_on_server['publication_date']);
    $same_date = (date('Y-m-d', $record_date) == date('Y-m-d', $date));
    $same_title = ($doi_on_server['title'] == $title);

    if (!($same_date && $same_title)) {
      $response = lagotto_services_do_modify_request($url, 'PUT', $article_desc);
      return $response;
    }
    return NULL;
  }
  elseif (!$options['quiet']) {
    watchdog('lagotto_services',
      'DOI [%doi] already exists on the ALM server',
      array(
        '%doi' => $doi,
      ), WATCHDOG_WARNING);
    return NULL;
  }
}

/**
 * API: Check for existence of the DOI.
 *
 * @param string $doi
 *   The DOI for the article.
 * @param array $options
 *   'service_key' - override the key from lagotto_services_service_key
 *   'service_url' - override the url from lagotto_services_service_url
 *   'fetch_api_version' - override the normal api (e.g. '5').
 *   'sources' - if present, an array of source names to filter the results.
 *   Note that include_detail and quiet keys are overriden.
 *
 * @return array|null
 *   The decoded JSON data for the DOI if the DOI exists, NULL otherwise.
 */
function lagotto_services_doi_exists($doi, $options = array()) {
  $override_options = array(
    'include_detail' => FALSE,
    'quiet' => TRUE,
  );
  $options = array_merge($options, $override_options);

  $lookup = lagotto_services_fetch_doi($doi, $options);
  if (!empty($lookup) && $lookup->code == 200) {
    $lookup_data = json_decode($lookup->data, TRUE);
    return reset($lookup_data);
  }
  else {
    return NULL;
  }
}

/**
 * API: Do an article lookup request using the ALM v5 api.
 *
 * To find a record on the ALM server using the DOI, returning the details
 *
 * @param mixed $doi_list
 *   The DOI for the article, or an array of them. DOIs are sanitised and
 *   invalid entries are ignored.
 * @param array $options
 *   'include_detail' - TRUE to include timeline info in the metrics.
 *   'service_key' - override the key from lagotto_services_service_key
 *   'service_url' - override the url from lagotto_services_service_url
 *   'fetch_api_version' - override the normal api (e.g. '5').
 *   'quiet' -  Don't log failed lookups.
 *   'sources' - if present, an array of source names to filter the results.
 *   'order_by' - The order of results:
 *     'date' - use descending date,
 *     'event' - by descending event count
 *
 * @return array|NULL
 *   The response object from drupal_http_request()
 *   NULL if access denied or there were no valid DOIs passed in.
 *   A constructed object with 'code' 500 if the service URL is invalid.
 *
 * @see lagotto_services_make_fetch_url
 * @see lagotto_services_add_doi
 */
function lagotto_services_fetch_doi($doi_list, $options = array()) {
  $default_options = array(
    'include_detail' => FALSE,
    'quiet' => FALSE,
    'service_key' => NULL,
    'service_url' => NULL,
    'sources' => NULL,
    'order_by' => NULL,
  );
  $options = array_merge($default_options, $options);

  // Unlike the add & delete options, fetch doesn't change server state so
  // there's no need for a dediacated disable option.
  $enabled = user_access('make doi requests');
  if (!$enabled) {
    watchdog('lagotto_services', 'DOI request failed: permission denied', WATCHDOG_WARNING);
    return NULL;
  }

  $http_request = array(
    'headers' => array(
      'Accept' => 'application/json',
    ),
    'method' => 'GET',
  );

  // Make a request URL and do it.
  $url = lagotto_services_make_fetch_url($doi_list, $options);
  if (!empty($url)) {
    $response = drupal_http_request($url, $http_request);
  }
  else {
    $response = new stdClass();
    $response->code = 500;
    $response->data = "Invalid service URL supplied";
  }

  // Evaluate request response.
  if (!$options['quiet'] && $response->code != 200) {
    watchdog('lagotto_services', 'Remote record request [%req] failed code [%code] with message [%msg]',
      array(
        '%req' => $url,
        '%code' => $response->code,
        '%msg' => $response->data,
      ), WATCHDOG_WARNING);
  }

  return $response;
}
