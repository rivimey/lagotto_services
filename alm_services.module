<?php
/**
 * @file
 * Drupal interface to the Lagotto service.
 */

// Prefixes that could appear on a DOI.
define('ALM_SERVICES_DOI_SCHEME', 'doi:');
define('ALM_SERVICES_DOI_URL', 'http://dx.doi.org/');
define('ALM_SERVICES_DOI_SSLURL', 'https://dx.doi.org/');

define('ALM_SERVICES_SERVICE_URI', '/api/v%version%/articles');
define('ALM_SERVICES_SERVICE_API_FETCH', 5);
define('ALM_SERVICES_SERVICE_API_POST', 4);

define('ALM_SERVICES_DEFAULT_DOMAIN', 'http://alm.plos.org');
define('ALM_SERVICES_DEFAULT_KEY', '');

/**
 * Implements hook_help().
 */
function alm_services_help($path, $arg) {
  switch ($path) {
    case 'admin/help#alm_services':
      $path = dirname(__FILE__) . '/README.md';
      if (file_exists($path)) {
        $readme = file_get_contents($path);
      }
      else {
        $path = dirname(__FILE__) . '/README.txt';
        if (file_exists($path)) {
          $readme = file_get_contents($path);
        }
      }
      if (!isset($readme)) {
        return NULL;
      }
      if (module_exists('markdown')) {
        $filters = module_invoke('markdown', 'filter_info');
        $info = $filters['filter_markdown'];

        if (function_exists($info['process callback'])) {
          $function = $info['process callback'];
          $output = filter_xss_admin($function($readme, NULL));
        }
        else {
          $output = '<pre>' . check_plain($readme) . '</pre>';
        }
      }
      else {
        $output = '<pre>' . check_plain($readme) . '</pre>';
      }
      return $output;

    case 'admin/config/services/alm_services':
      return '<p>' . t('The Drupal interface to the Lagotto service.') . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function alm_services_permission() {
  return array(
    'administer alm services' => array(
      'title' => t('Administer ALM Services'),
      'description' => t('Administer the ALM server configuration.'),
    ),
    'create alm records' => array(
      'title' => t('Create DOIs on ALM Server'),
      'description' => t('Add new DOIs to the ALM server (see configuration as well).'),
    ),
    'delete alm records' => array(
      'title' => t('Delete DOIs on ALM Server'),
      'description' => t('Delete DOIs on the ALM server (see configuration as well).'),
    ),
    'make doi requests' => array(
      'title' => t('Make DOI requests'),
      'description' => t('Request information about individual DOIs from the ALM server.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function alm_services_menu() {
  $items = array();
  $items['admin/config/services/alm_services'] = array(
    'title' => 'ALM Services',
    'description' => 'Provides configuration options for ALM Services.',
    'access arguments' => array('administer alm services'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('alm_services_admin_settings'),
    'file' => 'alm_services.admin.inc',
  );
  return $items;
}

/**
 * API: Return the configured ALM service host (base URL).
 *
 * @return string
 *   the server base URL as configured by the user, or the default.
 */
function alm_services_service_host() {
  $url = variable_get('alm_services_url', ALM_SERVICES_DEFAULT_DOMAIN);
  return $url;
}

/**
 * API: Return the configured ALM service URL.
 *
 * @param int $version
 *   API version number
 *
 * @return string
 *   the server URL as configured by the user, or the default.
 */
function alm_services_service_url($version = ALM_SERVICES_SERVICE_API_FETCH) {
  $available_versions = array(
    ALM_SERVICES_SERVICE_API_FETCH,
    ALM_SERVICES_SERVICE_API_POST,
  );

  if (!in_array($version, $available_versions)) {
    $version = ALM_SERVICES_SERVICE_API_FETCH;
  }

  $service_uri = preg_replace('/\%version\%/', $version, ALM_SERVICES_SERVICE_URI);

  $url = variable_get('alm_services_url', ALM_SERVICES_DEFAULT_DOMAIN) . $service_uri;
  return $url;
}

/**
 * API: Return the configured ALM service API key.
 *
 * @return string
 *   the server key as configured by the user, or the default.
 */
function alm_services_service_key() {
  $key = variable_get('alm_services_apikey', ALM_SERVICES_DEFAULT_KEY);
  return $key;
}

/**
 * Make a metrics retrieval URL for the indicated DOI.
 *
 * which should NOT have been urlencoded...
 * i.e. it is in the form "10.7554/jnl.01086"
 *
 * Globals: defines PLoS_URL and PLoS_KEY define the base URL and the API key.
 *
 * @param mixed $doi_list
 *   The DOI that is being enquired about. This can be either a string or an
 *   array of strings. Invalid DOIs are ignored, and prefixes (e.g. doi:) are
 *   removed.
 *
 * @param array $options
 *   'include_detail' - TRUE to include timeline info in the metrics.
 *   'service_key' - override the key from alm_services_service_key
 *   'service_url' - override the url from alm_services_service_url
 *   'api_version' - override the api version number (e.g. '5'). Use with care.
 *
 * @return string
 *   A URL to be retrieved.
 */
function alm_services_make_fetch_url($doi_list, $options = array()) {
  $default_options = array(
    'include_detail' => FALSE,
    'service_key' => NULL,
    'service_url' => NULL,
    'api_version' => ALM_SERVICES_SERVICE_API_FETCH,
  );
  $options = array_merge($default_options, $options);

  if (is_string($doi_list)) {
    $doi_list = array($doi_list);
  }

  if (is_array($doi_list)) {
    $dois = array();
    foreach ($doi_list as $doi) {
      $d = alm_services_sanitise_doi($doi);
      if (!empty($d)) {
        $dois[] = $d;
      }
    }
    $clean_dois = implode(',', $dois);
  }

  if (empty($clean_dois)) {
    return NULL;
  }

  if (!empty($options['service_url'])) {
    $url = $options['service_url'];
  }
  else {
    $url = alm_services_service_url($options['api_version']);
  }
  if (!valid_url($url, TRUE)) {
    return NULL;
  }
  $key = alm_services_service_key();

  if ($options['include_detail']) {
    $info = 'detail';
  }
  else {
    $info = 'summary';
  }

  $query = array(
    'api_key' => $key,
    'type' => 'doi',
    'ids' => $clean_dois,
    'info' => $info,
  );
  return url($url, array('absolute' => TRUE, 'query' => $query));
}

/**
 * Check that the DOI is minimal.
 *
 * (i.e. not a URL or URI) and is valid (i.e. has at least
 * one slash in it).
 *
 * @param string $doi
 *   the DOI that is being checked
 *
 * @return bool|mixed
 *   a trimmed $doi if it validates OK, FALSE if not.
 */
function alm_services_sanitise_doi($doi) {
  $doi_cache = alm_services_sanitise_doi_cache($doi);

  return $doi_cache[$doi];
}

/**
 * Build a cache of DOI requests.
 *
 * @param string $doi
 *   the DOI that is being checked
 *
 * @return mixed
 *   an array of DOIs - the request as the key and the sanitised DOI as the
 * value.
 */
function alm_services_sanitise_doi_cache($doi) {
  $doi_cache = &drupal_static(__FUNCTION__, array());

  if (!isset($doi_cache[$doi])) {
    $patterns = array(
      '/^https?:\/\/dx\.doi\.org\/(10\.\d+\/.+)$/',
      '/^doi:(10\.\d+\/.+)$/',
    );

    $clean_doi = preg_replace($patterns, '$1', $doi);

    if (!preg_match('/^10\.\d+\/.+$/', $clean_doi)) {
      $doi_cache[$doi] = FALSE; /* negative cache */
    }
    else {
      $doi_cache[$doi] = $clean_doi;
    }
  }

  return $doi_cache;
}

/**
 * API: Make a request using the ALM v4 api.
 *
 * To create a new record on the ALM server using the DOI and other details
 * provided.
 *
 * @param string $doi
 *   The DOI of the article
 * @param string $date
 *   The publication date of the article (unix)
 * @param string $title
 *   The title of the article
 * @param array $options
 *   'include_detail' - TRUE to include timeline info in the metrics.
 *   'service_key' - override the key from alm_services_service_key
 *   'service_url' - override the url from alm_services_service_url
 *   'api_version' - override the api version number (e.g. '5'). Use with care.
 *   'quiet' - don't log failed creations because DOI already exists
 *   'autoupdate' - update if DOI exists on server
 *
 * @return array
 *   An associative array containing the response from the server or null if
 * either drupal access is denied, the user and PW is unset or this facility
 * is administratively disabled.
 */
function alm_services_add_doi($doi, $date, $title, $options = array()) {
  $default_options = array(
    'include_detail' => FALSE,
    'service_key' => NULL,
    'service_url' => NULL,
    'api_version' => ALM_SERVICES_SERVICE_API_POST,
    'autoupdate' => FALSE,
    'quiet' => FALSE,
  );
  $options = array_merge($default_options, $options);

  $create_doi_config = variable_get('alm_services_create_doi_enabled', FALSE);
  $enabled = $create_doi_config && user_access('create alm records');
  if (!$enabled) {
    watchdog('alm_services', 'Add DOI request failed: permission denied', WATCHDOG_WARNING);
    return NULL;
  }

  $fetch_options = array(
    'api_version' => ALM_SERVICES_SERVICE_API_FETCH,
    'include_detail' => FALSE,
    'quiet' => TRUE,
  );
  $fetch_options = array_merge($options, $fetch_options);
  $lookup = alm_services_fetch_doi($doi, $fetch_options);

  if ($lookup && ($lookup->code != 200 || $options['autoupdate'])) {
    $year = check_plain(date('Y', $date));
    $mon = check_plain(date('n', $date));
    $day = check_plain(date('j', $date));

    // Turn html entities into utf8 and strip html elements.
    $title = html_entity_decode(filter_xss($title, array()), ENT_QUOTES, 'UTF-8');
    $title = check_plain($title);

    $user = variable_get('alm_services_adminuser', '');
    $pass = variable_get('alm_services_adminpass', '');
    if (empty($user) || empty($pass)) {
      watchdog('alm_services',
        'Add DOI request failed: credentials not set',
        WATCHDOG_WARNING);
      return NULL;
    }
    $auth64 = base64_encode($user . ':' . $pass);

    $request = array(
      'article' => array(
        'doi' => $doi,
        'title' => $title,
        'year' => (int) $year,
        'month' => (int) $mon,
        'day' => (int) $day,
      ),
    );

    $options = array(
      'headers' => array(
        'Content-Type' => 'application/json',
        'Accept' => 'application/json',
        'Authorization' => 'Basic ' . $auth64,
      ),
      'method' => 'POST',
    );

    $url = alm_services_service_url($options['api_version']);

    $updated = FALSE;

    if ($lookup->code != 200) {
      $body = json_encode($request);
      $options['data'] = $body;
      $response = drupal_http_request($url, $options);

      // Evaluate response code.
      if ($response->code != 201) {
        watchdog('alm_services', 'Info DOI request [%req] failed code [%code] with message [%msg]',
          array(
            '%req' => $body,
            '%code' => $response->code,
            '%msg' => $response->data,
          ), WATCHDOG_WARNING);
      }

      return $response;
    }
    elseif ($options['autoupdate']) {
      $lookup_data = json_decode($lookup->data, TRUE);
      $lookup_doi = reset($lookup_data);
      // Do the details from the current record differ from those provided?
      $record_date = strtotime($lookup_doi['publication_date']);
      $same_date = date('Y-m-d', $record_date) == date('Y-m-d', $date);
      $same_title = $lookup_doi['title'] == $title;
      if (!($same_date && $same_title)) {
        // Perform update.
        $options['method'] = 'PUT';

        unset($request['headers']['doi']);
        $body = json_encode($request);
        $options['data'] = $body;

        $url .= '/info:doi/' . $doi;
        $response = drupal_http_request($url, $options);

        // Evaluate response code.
        if ($response->code != 200) {
          watchdog('alm_services', 'Remote DOI request [%req] failed code [%code] with message [%msg]',
            array(
              '%req' => $body,
              '%code' => $response->code,
              '%msg' => $response->data,
            ), WATCHDOG_WARNING);
        }
        else {
          $updated = TRUE;
        }

        return $response;
      }
    }

    if (!$updated && !$options['quiet']) {
      watchdog('alm_services', 'DOI [%doi] already exists on the ALM server',
        array(
          '%doi' => $doi,
        ), WATCHDOG_WARNING);
    }
  }
}

/**
 * API: Delete a record request using the ALM v4 api.
 *
 * @param string $doi
 *   The DOI of the article
 * @param array $options
 *   'include_detail' - TRUE to include timeline info in the metrics.
 *   'service_key' - override the key from alm_services_service_key
 *   'service_url' - override the url from alm_services_service_url
 *   'api_version' - override the api version number (e.g. '5'). Use with care.
 *   'quiet' - don't log failed deletions because lookup failed
 *
 * @return array
 *   An associative array containing the response from the server or null if
 * either drupal access is denied, the user and PW is unset or this facility
 * is administratively disabled.
 */
function alm_services_delete_doi($doi, $options = array()) {
  $default_options = array(
    'include_detail' => FALSE,
    'service_key' => NULL,
    'service_url' => NULL,
    'api_version' => ALM_SERVICES_SERVICE_API_POST,
    'quiet' => FALSE,
  );
  $options = array_merge($default_options, $options);

  $delete_doi_config = variable_get('alm_services_delete_doi_enabled', FALSE);
  $enabled = $delete_doi_config && user_access('delete alm records');
  if (!$enabled) {
    watchdog('alm_services',
      'Delete DOI request failed: permission denied',
      WATCHDOG_WARNING);
    return NULL;
  }

  // Do a fetch to see if the article exists on the server.
  $fetch_options = array(
    'api_version' => ALM_SERVICES_SERVICE_API_FETCH,
    'include_detail' => FALSE,
    'quiet' => TRUE,
  );
  $fetch_options = array_merge($options, $fetch_options);
  $lookup = alm_services_fetch_doi($doi, $fetch_options);

  if ($lookup && $lookup->code == 200) {

    $url = alm_services_service_url($options['api_version']) . '/info:doi/' . $doi;

    $user = variable_get('alm_services_adminuser', '');
    $pass = variable_get('alm_services_adminpass', '');
    if (empty($user) || empty($pass)) {
      watchdog('alm_services',
        'Delete DOI request failed: credentials not set',
        WATCHDOG_WARNING);
      return NULL;
    }
    $auth64 = base64_encode($user . ':' . $pass);

    // Construct an authenticated http request for the JSON data.
    $options = array(
      'headers' => array(
        'Content-Type' => 'application/json',
        'Accept' => 'application/json',
        'Authorization' => 'Basic ' . $auth64,
      ),
      'method' => 'DELETE',
    );
    $response = drupal_http_request($url, $options);

    // If it didn't work and we're not being quiet, log the event.
    if (!$options['quiet'] && $response->code != 200) {
      watchdog('alm_services', 'Remote DOI request [%req] failed code [%code] with message [%msg]',
        array(
          '%doi' => $doi,
          '%code' => $response->code,
          '%msg' => $response->data,
        ),
        WATCHDOG_WARNING);
    }
    return $response;
  }
  elseif (!$options['quiet']) {
    watchdog('alm_services',
      'DOI [%doi] doesn\'t already exist on the ALM server. Deletion not performed.',
      array(
        '%doi' => $doi,
      ),
      WATCHDOG_WARNING);
  }
}

/**
 * API: Do an article lookup request using the ALM v5 api.
 *
 * To find a record on the ALM server using the DOI, returning the details
 *
 * @param mixed $doi_list
 *   The DOI for the article, or an array of them.
 *
 * @param array $options
 *   'include_detail' - TRUE to include timeline info in the metrics.
 *   'service_key' - override the key from alm_services_service_key
 *   'service_url' - override the url from alm_services_service_url
 *   'quiet' -  Don't log failed lookups.
 *
 * @return array|NULL
 *   The response object from drupal_http_request() or null if access denied.
 */
function alm_services_fetch_doi($doi_list, $options = array()) {
  $default_options = array(
    'include_detail' => FALSE,
    'quiet' => FALSE,
    'service_key' => NULL,
    'service_url' => NULL,
  );
  $options = array_merge($default_options, $options);

  // Unlike the add & delete options, fetch doesn't change server state so
  // there's no need for a dediacated disable option.
  $enabled = user_access('make doi requests');
  if (!$enabled) {
    watchdog('alm_services', 'DOI request failed: permission denied', WATCHDOG_WARNING);
    return NULL;
  }

  $request = array(
    'headers' => array(
      'Accept' => 'application/json',
    ),
    'method' => 'GET',
  );

  // Make a request URL and do it.
  $url = alm_services_make_fetch_url($doi_list, $options);
  if (!empty($url)) {
    $response = drupal_http_request($url, $request);
  }
  else {
    $response = new stdClass();
    $response->code = 500;
    $response->data = "Invalid service URL supplied";
  }

  // Evaluate request response.
  if (!$options['quiet'] && $response->code != 200) {
    watchdog('alm_services', 'Remote record request [%req] failed code [%code] with message [%msg]',
      array(
        '%req' => $url,
        '%code' => $response->code,
        '%msg' => $response->data,
      ), WATCHDOG_WARNING);
  }

  return $response;
}
